---
layout: post
title:  "ECMA-262-3 Chapter 2 ECMA 262-3 Variable object"
date:   2016-02-28
categories: javascript
---


> 출처 및 참고 사이트<br>
http://huns.me/development/189<br>
http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object
<br>

## 목적
 이번 장에서 실행 콘텍스트와 변수와의 관계 및 데이터 저장 관련 메커니즘을 알아보고자한다. 
	

## 용어
 * 변수 객체(Variable object 이하VO) : 이번 장에서 다룰 핵심적인 키워드이며, 실행 콘텍스트 프로퍼티중 하나이며, 다음 내용들을 저장한다.
 
  **- 변수(var, Variable object)<br>**
  변수 이름생성, 값은 undefined VO프로퍼티에 추가되며, 변수의 이름이 선언된 형식 매개변수나 함수의 이름과 같다면, 이전 변수 선언은 무시됨.
  
  **- 함수선언(FunctionDeclaration, 이하FD)<br>**
  함수 객체의 이름과 값으로 함수 객체의 프로퍼티가 초기화되며, 변수 객체가 이미 같은 이름을 갖고 있다면 새로운 값으로 교체됨.
  
  **- 함수 매개변수들(function formal parameters)<br>**
  함수 매개변수의 이름과 값을 갖는 변수 객체의 프로퍼티가 생성되며, 값이 전달되지 않은 함수 매개변수의 대해서는 undefined로 VO프로퍼티가 초기화됨.
  
 * 전역 콘텍스트(Global contexts) : 제어가 실행 콘텍스트에 들어가기전 생성된다. 전역 객체 자신이 바로 Global Context의 VO가 된다.
 
  **- 오직 전역 콘텍스트의 VO에 존재하는 변수만 간접적으로 참조(VO 프로퍼티를 통하여) 가능<br>**
  **- 다른 콘텍스트에서는 직접VO를 참조 할 수 없으며, 이것이 기본 메커니즘이 된다.<br>**
  **- 변수나 함수를 선언된것은 실행 콘텍스트의 VO에 변수의 이름과 값에 값을 갖는 새로운 프로퍼티가 생성되는것이다.<br>**

 * 전역 객체(Global object) : 제어가 실행 콘텍스트에 진입전 생성된다. 생성된 전역 객체는 단일 사본으로 존재하며, 이 객체의 프로퍼티는 프로그램 영역내 어디에서라도 접근 가능하다(This object exists in the single copy, its properties are accessible from any place of the program). 프로그램이 종료되면, 전역 객체의 대한 라이프 사이클도 종료된다.

  
## 구조 살펴보기

![image](/images/ecma002.jpeg)
